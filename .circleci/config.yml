version: 2.1
orbs: 
    snyk: snyk/snyk@0.0.8
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: sandrajinnevall/microblog
    docker:
      - image: circleci/python:3.8
jobs:
  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest2 -f ./docker/Dockerfile_prod .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME:latest2
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - snyk/scan:
          docker-image-name: $IMAGE_NAME
          additional-arguments: "--policy-path=.snyk"
          fail-on-issues: false
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest2
  publish-tag:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest2 $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest2
            docker push $IMAGE_NAME:$IMAGE_TAG

  deploy-latest:
    executor: docker-publisher
    steps:
      - checkout
      - run:
         name: Install venv
         command: |
             sudo apt-get install python3-venv
             python3 -m venv .venv
      - run: echo "source ~/project/.venv/bin/activate" >> $BASH_ENV 
      - run:
         name: Install dependencies and run appServer
         command: |
            python3 -m venv venv
             . venv/bin/activate
             make install
             pip3 install --upgrade setuptools
             pip3 install --upgrade pip
             pip3 install wheel
             make install-deploy
             pip3 install ansible[azure]
             cd ansible
             ansible-playbook gather_vm_instances.yml appServer.yml

  snyk:
      docker:
          - image: circleci/python:3.8
      working_directory: ~/repo
      steps:
          - checkout
          - run:
              name: install dependencies
              command: |
                  python3 -m venv venv
                  . venv/bin/activate
                  make install
          - run: echo "source ~/repo/venv/bin/activate" >> $BASH_ENV # här gör vi så att så att CircleCi automatisk laddar venv och då kollar Snyk vad vi har installerat i den.
          - snyk/scan

  test:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Running test with docker
          command: |
            docker build -t $IMAGE_NAME:latest2 -f ./docker/Dockerfile_test .
            docker run $IMAGE_NAME:latest2


workflows:
  version: 2
  build-master:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - test:
          filters:
            branches:
              only: master
      - publish-latest:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-latest:
         requires:
           - publish-latest
         filters:
           branches:
             only: master
      - snyk:
          filters:
            branches:
              only: master
  build-tags:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-tag:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/